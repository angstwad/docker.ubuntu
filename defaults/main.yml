---
# uninstall previous versions of docker, but not by default
# https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#uninstall-old-versions
uninstall_previous_docker_versions: false

# assume that the desired version is community edition
docker_edition: ce

# docker-ce is the default package name
docker_pkg_name: "{{ 'docker-ee' if docker_edition == 'ee' else 'docker-ce' }}"
docker_apt_cache_valid_time: 600
docker_aufs_enabled: true

# docker dns path for docker.io package ( changed at ubuntu 14.04 from docker to docker.io )
docker_defaults_file_path: /etc/default/docker

# The package name required for dirmngr (required key installation to work on some deb systems)
apt_dirmngr_pkg: dirmngr

# Important if running Ubuntu 12.04-13.10 and ssh on a non-standard port
ssh_port: 22
# Place to get apt repository key
apt_key_url: "hkp://ha.pool.sks-keyservers.net"
# apt repository key signature
apt_key_sig: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
# apt keyring file
keyring: "/etc/apt/trusted.gpg.d/docker.gpg"
# Name of the apt repository for Docker CE or EE
apt_repository_arch: "amd64"
apt_repository: "deb [arch={{ apt_repository_arch }}] https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release|lower }} stable"

# daemon_json allows you to configure the daemon with the daemon.json file.
# https://docs.docker.com/engine/reference/commandline/dockerd/#on-linux
#daemon_json:
#  hosts:
#    - "fd://"
#    - "tcp://0.0.0.0:2376"
#  log-level: debug
#  log-driver: json-file
#  log-opts:
#      max-file: "3"
#      max-size: "10m"
daemon_json:

# List of users to be added to 'docker' system group (disabled by default)
# SECURITY WARNING: 
# Be aware that granted users can easily get full root access on the docker host system!
docker_group_members: []

# configurable proxies: a reasonable default is to re-use the proxy from ansible_env:
# docker_http_proxy: "{{ ansible_env.http_proxy|default('') }}"
# Notes:
# if docker_http_proxy==""   the role sets HTTP_PROXY="" (useful to 'empty' existing ENV var)
# if docker_http_proxy is undefined the role will not set/modify any ENV vars
docker_http_proxy:
docker_https_proxy:
docker_no_proxy:

# Flags for whether to install pip packages
pip_install_pip: true
pip_install_setuptools: true
# pip_install_docker is ignored if pip_install_docker_compose is true as docker-compose as a dependency over docker.
# See var/main.yml for more information.
pip_install_docker: true
pip_install_docker_compose: true

# Versions for the python packages that are installed
pip_version_pip: latest
pip_version_setuptools: latest
# pip_version_docker is ignored if pip_install_docker_compose is true as docker-compose as a dependency over docker.
# See var/main.yml for more information.
pip_version_docker: latest
pip_version_docker_compose: latest

# If this variable is set to true kernel updates and host restarts are permitted.
# Warning: Use with caution in production environments.
kernel_update_and_reboot_permitted: no

# Set to 'yes' or 'true' to enable updates (sets 'latest' in apt module)
update_docker_package: no

# Change these to 'present' if you're running Ubuntu 12.04-13.10 and are fine with less-than-latest packages
kernel_pkg_state: latest
cgroup_lite_pkg_state: latest
dmsetup_pkg_state: latest
# Force an install of the kernel extras, in case you're suffering from some issue related to the
# static binary provided by upstream Docker.  For example, see this GitHub Issue in Docker:
# https://github.com/docker/docker/issues/12750
# Warning: Installing kernel extras is potentially interruptive/destructive and will install backported
# kernel if running 12.04.
install_kernel_extras: false
# Install Xorg packages for backported kernels.  This is usually unnecessary except for environments
# where an X/Unit desktop is actively being used. If you're not using an X/Unity on 12.04, you
# won't need to enable this.
install_xorg_pkgs: false
